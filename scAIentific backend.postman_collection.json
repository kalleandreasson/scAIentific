{
	"info": {
		"_postman_id": "3ab9bbda-f1f8-481b-877b-f3cd7af9f972",
		"name": "scAIentific backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19995663",
		"_collection_link": "https://gold-astronaut-934472.postman.co/workspace/sAIentific~d97966e9-0ff3-4f5f-8544-18ba8c771976/collection/19995663-3ab9bbda-f1f8-481b-877b-f3cd7af9f972?action=share&source=collection_link&creator=19995663"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "1-Delete the newuser",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/delete/newuser",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"delete",
								"newuser"
							]
						}
					},
					"response": []
				},
				{
					"name": "registerUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When successfully registerd should return 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains a user ID\", function () {\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.have.property(\"id\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"uuid": "43af8775-396e-4525-9751-ce217ecd8a9f"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"newuser\",\r\n    \"password\": \"newpassword\",\r\n    \"email\": \"user@example.com\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "409 registerUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When the user sends credentials that already exist in the database, should return 409 Conflict\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes an error message that explains the conflict\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.a('string');\r",
									"    pm.expect(jsonData.message).to.include('already exists');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"testuser\",\r\n  \"password\": \"testpassword\",\r\n  \"email\": \"user@example.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 login User-1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.get(\"variable_key\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When user tries log in with correct credintioals should return 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains a JWT token\", function () {\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.have.property(\"token\"); \r",
									"\r",
									"    // Save the JWT token as a collection variable\r",
									"    pm.collectionVariables.set(\"accessToken-user-1\", jsonResponse.token); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"User-1\",\r\n  \"password\": \"User-1-user\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 login User-2 correct Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When user tries log in with correct credintioals should return 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains a JWT token\", function () {\r",
									"    const jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.have.property(\"token\"); \r",
									"\r",
									"    // Save the JWT token as a collection variable\r",
									"    pm.collectionVariables.set(\"accessToken-user-2\", jsonResponse.token); \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"User-2\",\r\n  \"password\": \"User-2-user\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 login User-2 Incorrect Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When user attempts to log in with wrong credentials, should get 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Response includes a clear, string-type error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.a('string');\r",
									"    pm.expect(jsonData.message).to.include(\"Incorrect username or password\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"User-2\",\r\n  \"password\": \"User-3-user\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assistant",
			"item": [
				{
					"name": "201 CREATE assistant with file user-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for Status Code - Expecting 201 for creation\r",
									"pm.test(\"When an assistant is created for an authenticated user, should return 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test for receiving a new Assistant ID\r",
									"pm.test(\"When an authenticated user creates an assistant, should receive an assistant_id\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.have.property(\"assistant_id\");\r",
									"\r",
									"    // Save the new Assistant ID as a variable\r",
									"    pm.collectionVariables.set(\"user-1-AssistantId\", jsonResponse.assistant_id);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "researchArea",
									"value": "Gender",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1eef7232-71f4-41e0-8929-e1018ed382be"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/research-front/create-assistant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"research-front",
								"create-assistant"
							]
						}
					},
					"response": []
				},
				{
					"name": "409 CREATE assistant user-1 has one",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When a user attempts to create a second assistant but already has one, should return 409 with 'User already has an assistant' error\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(409);\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.title).to.eql(\"Conflict\");\r",
									"    pm.expect(jsonResponse.status).to.eql(409); \r",
									"    pm.expect(jsonResponse.detail).to.include(\"User already has an assistant\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "researchArea",
									"value": "Gender",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1eef7232-71f4-41e0-8929-e1018ed382be"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/research-front/create-assistant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"research-front",
								"create-assistant"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 CREATE /create-assistant Not authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When not authenticated, should not be able to create an assistant and should return 401\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "researchArea",
									"value": "Gender",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1eef7232-71f4-41e0-8929-e1018ed382be"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/research-front/create-assistant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"research-front",
								"create-assistant"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 GET /assistant user-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for Status Code - Expecting 200 for successful retrieval\r",
									"pm.test(\"When authenticated and an assistant exists, should return 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test for Correct Assistant ID in the Response\r",
									"pm.test(\"Response should contain the correct Assistant ID\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.have.property(\"assistant_id\");\r",
									"    pm.expect(jsonResponse.assistant_id).to.eql(pm.collectionVariables.get(\"user-1-AssistantId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/research-front/get-assistant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"research-front",
								"get-assistant"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 GET /assistant Not authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for Status Code - Expecting 200 for successful retrieval\r",
									"pm.test(\"When not authenticated, should not assistant id and return 401\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/research-front/get-assistant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"research-front",
								"get-assistant"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 DELETE /delete-assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When authenticated and an assistant is deleted, should successfully return status 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/research-front/delete-assistant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"research-front",
								"delete-assistant"
							]
						}
					},
					"response": []
				},
				{
					"name": "401/delete-assistant Not authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When not authenticated, should not be able to delete assistantand return 401\", function () {\r",
									"    pm.expect(pm.response.code).to.eql(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text",
								"uuid": "09e37c5a-050a-4d78-b6c3-353b564c7bb3"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/research-front/delete-assistant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"research-front",
								"delete-assistant"
							]
						}
					},
					"response": []
				},
				{
					"name": "404 /delete-assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('When authenticated but no assistant exists, should not proceed with deletion and return 404.', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.include(\"No assistant found\");\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/research-front/delete-assistant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"research-front",
								"delete-assistant"
							]
						}
					},
					"response": []
				},
				{
					"name": "404  /get-assistant no assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When authenticated but no assistant exists, should return 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has error message 'No assistant found'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql('No assistant is found'); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/research-front/get-assistant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"research-front",
								"get-assistant"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chat with assistant",
			"item": [
				{
					"name": "412 /send-message no assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When authenticated but no assistant found, should return 412 with 'Assistant not found' message\", function () {\r",
									"    pm.response.to.have.status(412);\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData.message).to.include(\"Assistant not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userMessage\": \"Tell me about the file\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chat/send-message",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat",
								"send-message"
							]
						}
					},
					"response": []
				},
				{
					"name": "201 CREATE assistant with file user-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for Status Code - Expecting 201 for creation\r",
									"pm.test(\"When an assistant is created for an authenticated user, should return 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test for receiving a new Assistant ID\r",
									"pm.test(\"When an authenticated user creates an assistant, should receive an assistant_id\", function () {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse).to.have.property(\"assistant_id\");\r",
									"\r",
									"    // Save the new Assistant ID as a variable\r",
									"    pm.collectionVariables.set(\"user-1-AssistantId\", jsonResponse.assistant_id);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text",
								"uuid": "771042ce-c92a-4e2b-9bbb-c73851d8ec78",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "researchArea",
									"value": "Gender",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1eef7232-71f4-41e0-8929-e1018ed382be"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/research-front/create-assistant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"research-front",
								"create-assistant"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 /send-message authenticated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When authenticated and a message is sent, should successfully retrieve message list with status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('messages');\r",
									"    pm.expect(responseData.messages).to.be.an('array');\r",
									"    // check if the array is not empty\r",
									"    pm.expect(responseData.messages.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userMessage\": \"Tell me about the file\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chat/send-message",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat",
								"send-message"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 /send-message Not authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When not authenticated and attempting to send a message, should return 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userMessage\": \"Tell me about the file\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chat/send-message",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat",
								"send-message"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 /send-message empty message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When authenticated but sends an empty message, should return 400 with 'Message content cannot be empty' error\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include('Message content cannot be empty');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userMessage\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/chat/send-message",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat",
								"send-message"
							]
						}
					},
					"response": []
				},
				{
					"name": "200/chat-history authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When authenticated and retrieving messages, should successfully get status 200 and an array of messages\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('messages');\r",
									"    pm.expect(responseData.messages).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/chat/chat-history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat",
								"chat-history"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 /chat-history Not authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When not authenticated, should return 401 for access attempt\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/chat/chat-history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat",
								"chat-history"
							]
						}
					},
					"response": []
				},
				{
					"name": "204 DELETE /delete-assistant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When authenticated and an assistant is deleted, should successfully return status 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/research-front/delete-assistant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"research-front",
								"delete-assistant"
							]
						}
					},
					"response": []
				},
				{
					"name": "412 /chat-history No assistant to chat with",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When authenticated but no assistant is found during chat history retrieval, should return 412 with 'Assistant not found' error\", function () {\r",
									"    pm.response.to.have.status(412);\r",
									"    let responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('message');\r",
									"    pm.expect(responseData.message).to.include(\"Assistant not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken-user-1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/chat/chat-history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat",
								"chat-history"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete the newuser",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/delete/newuser",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"delete",
						"newuser"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5066"
		},
		{
			"key": "accessToken-user-1",
			"value": "",
			"type": "string"
		},
		{
			"key": "accessToken-user-2",
			"value": "",
			"type": "string"
		},
		{
			"key": "jwtToken",
			"value": ""
		},
		{
			"key": "user-1-AssistantId",
			"value": ""
		},
		{
			"key": "username",
			"value": "newuser",
			"type": "string"
		}
	]
}