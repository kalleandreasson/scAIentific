@inject IHttpClientFactory HttpClientFactory
@using System.Net.Http.Headers

<PageTitle>Home</PageTitle>

<div class="index-container">
    <h1>Find research front</h1>
    <button @onclick="() => SendFileToApi(uploadedFileName, userPrompt)">API Request with Uploaded File and Prompt</button>
</div>

<div>
    <p>@textToOutput</p>
</div>

@code {
    private HttpClient httpClient => HttpClientFactory.CreateClient();
    private string textToOutput;
    private string uploadedFileName; // This should be assigned when the file is initially uploaded
    private string userPrompt = ""; // Bind this to an input field so the user can set it

    private async Task<byte[]> GetFileData(string fileName)
    {
        // Combine the path to the folder and the filename
        var filePath = Path.Combine(Directory.GetCurrentDirectory(), "store-files", "researchfile", fileName);

        if (!File.Exists(filePath))
        {
            throw new FileNotFoundException("The file was not found.", fileName);
        }

        return await File.ReadAllBytesAsync(filePath);
    }

    private async Task SendFileToApi(string fileName, string prompt)
{
    try
    {
        byte[] fileData = await GetFileData(fileName);
        using var content = new MultipartFormDataContent();

        // Add the file content
        var fileContent = new ByteArrayContent(fileData);
        fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        content.Add(fileContent, "file", fileName);

        // Add the prompt
        var promptContent = new StringContent(prompt);
        content.Add(promptContent, "prompt");

        // Send the request
        var response = await httpClient.PostAsync("http://localhost:5000/api-endpoint", content);

        if (response.IsSuccessStatusCode)
        {
            // Handle success
            textToOutput = "File and prompt sent successfully.";
            // Process the response as needed
        }
        else
        {
            // Handle failure
            textToOutput = "Failed to send the file and prompt: " + response.ReasonPhrase;
        }
    }
    catch (Exception ex)
    {
        textToOutput = $"Exception when sending file and prompt: {ex.Message}";
    }
}

}