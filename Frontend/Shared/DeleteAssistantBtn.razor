@using Frontend.Shared
@inherits BaseFileUploadComponent
@using Microsoft.AspNetCore.Components.Forms
@using Frontend.Models
@using Frontend.Services
@using System.Net.Http.Headers
@inject SessionService sessionService
@inject IConfiguration Configuration
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ILogger<DeleteAssistantBtn> Logger

<div class="position-left">
    @if (!string.IsNullOrEmpty(flashMessage) && string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-success">@flashMessage</p>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <h3>Error</h3>
        <p class="text-danger">@errorMessage</p>
    }
    <button @onclick="HandleSubmit" disabled="@isDeleteInProgress">Delete Assistant</button>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnDeletionSuccess { get; set; }

    private string flashMessage = "";
    private string errorMessage = "";
    private bool isDeleteInProgress = false;

    private async Task HandleSubmit()
    {
        isDeleteInProgress = true;
        try
        {
            flashMessage = "";
            errorMessage = "";

            string apiBaseUrl = Configuration["APIBaseUrl"];
            string apiUrl = $"{apiBaseUrl}research-front/delete-assistant";

            var httpClient = HttpClientFactory.CreateClient("AuthorizedClient");
            var token = sessionService.GetToken();
            
            if (string.IsNullOrEmpty(token))
            {
                throw new InvalidOperationException("No authentication token available.");
            }

            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await httpClient.DeleteAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                await OnDeletionSuccess.InvokeAsync(true);
                flashMessage = "The assistant was deleted successfully!";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Logger.LogWarning("Assistant not found.");
            }
            else
            {
                Logger.LogWarning($"Server returned error: {response.StatusCode}.");
            }
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Failed to delete the assistant");
            errorMessage = "Failed to delete the assistant due to an unexpected error. Please try again later.";
        }
        finally
        {
            isDeleteInProgress = false;
        }
    }
}
