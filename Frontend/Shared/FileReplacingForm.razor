@using Frontend.Shared
@inherits BaseFileUploadComponent
@using Microsoft.AspNetCore.Components.Forms
@using Frontend.Models
@using Frontend.Services
@inject IConfiguration Configuration
@inject ILogger<FileReplacingForm> Logger
@inject NavigationManager NavigationManager
@inject FileUploadingService FileUploadingService


<div class="index-container">
    @if (!string.IsNullOrEmpty(flashMessage) && string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-success">
            @flashMessage
        </p>
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <h3>Error</h3>
        <p class="text-danger">@errorMessage</p>
    }

    <h2>Replace with new file</h2>

    <EditForm Model="@replaceFile" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>
            <label for="fileName">
                Enter the file name:
                <InputText id="fileName" @bind-Value="replaceFile.FileName"/>
            </label>
        </p>
        <p>
            Upload file (.docx):
            <InputFile OnChange="LoadFiles" accept=".docx"/>
        </p>
        
        <button type="submit">Replace</button>
    </EditForm>

    @if (uploadedFiles.Count > 0)
    {
        <div class="uploaded-files-section">
            <h2>Uploaded Files</h2>
            <ul class="uploaded-files-list">
                @foreach (var fileName in uploadedFiles)
                {
                    <li>@fileName</li>
                }
            </ul>
        </div>
    }
</div>

@code{
     private ReplaceFile replaceFile = new ReplaceFile();
        private string flashMessage = "";

        private string? errorMessage;
        private List<string> uploadedFiles = new();

        private async Task HandleValidSubmit()
        {
            flashMessage = "";
            errorMessage = "";
            if (!filesToUpload.Any())
            {
                errorMessage = "Please upload a file.";
                return;
            }
            try
            {
                string apiBaseUrl = Configuration["APIBaseUrl"];
                string userName= "singletonUser";
                string apiUrl = $"{apiBaseUrl}FileManager/upload/{userName}";
                // Explicitly declare the tuple types instead of using var
                (bool isSuccess, string latestErrorMessage) = await FileUploadingService.SendDataAndFileToApi(filesToUpload, apiUrl);

                if (isSuccess)
                {
                    flashMessage = $"Good! Now you have replaced the old file with \"{replaceFile.FileName}\" file successfully!";
                    uploadedFiles.Clear();
                    NavigationManager.NavigateTo("/");
                    // Trigger any success actions like navigating to another page or showing a success message
                }
                else
                {
                    errorMessage = latestErrorMessage;
                }
            }
            catch (Exception ex)
            {
                Logger?.LogError(ex, "Failed to submit replacing file form.");
                errorMessage = "Failed to create the assistant due to an unexpected error. Please try again later.";
            }
            finally
            {
                // Reset replaceFile model for new input
                replaceFile = new ReplaceFile();
            }
        }
}