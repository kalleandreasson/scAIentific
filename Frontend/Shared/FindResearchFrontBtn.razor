@using Frontend
@using System.Net.Http
@using System.Net.Http.Json
@using Newtonsoft.Json


<div>
 <p role="status">@textToOutput</p>
<textarea type="text" @bind="prompt" @oninput="OnInputEvent"></textarea>
</div>

<div>
    <button @onclick="OutputText">Find Research Front</button>
</div>

<div class="div-abstract">
    <p>@sentAbstract</p>
</div>


@code {
    private HttpResponseMessage? apiResponse;
    private string? textToOutput;
    private HttpClient? httpClient;

    protected override void OnInitialized()
    {
        httpClient = new HttpClient();
    }

    private string prompt = "";
    private string sentAbstract = "";
    private void OnInputEvent(ChangeEventArgs changeEvent)
    {

        prompt = (string)changeEvent.Value;

    }



    /// <summary>
    /// Makes request to generate the Research Front.
    /// </summary>
    /// <returns></returns>
    private async Task OutputText()
{
    try
    {
        Console.WriteLine("OutputText method called");

        var response = await httpClient.PostAsJsonAsync("http://localhost:5000/research-front/generate", new
        {
            systemMessage = "string",
            userMessage = $"Use svenska to generate research front of the following articals abstracts {prompt} "
            // other code
        });

        if (response.IsSuccessStatusCode)
        {
             Console.WriteLine("an answer come");
            sentAbstract = prompt;
            textToOutput = await response.Content.ReadAsStringAsync();
            prompt = ""; // Clear the prompt variable
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error content: {errorContent}");
            textToOutput = "Error: " + response.ReasonPhrase + " - " + errorContent;
        }
    }
    catch (HttpRequestException ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
        textToOutput = "Request failed: " + ex.Message;
    }
}

}
