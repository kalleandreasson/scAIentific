@using Frontend
@using System.Net.Http
@using System.Net.Http.Json
@using Newtonsoft.Json


<div>
 <p role="status">@textToOutput</p>


@* <input type="text" @oninput="OnInputEvent"> *@
<textarea type="text" @oninput="OnInputEvent"></textarea>
</div>

<div>
    <button @onclick="OutputText">Find Research Front</button>
</div>


@code {
    private HttpResponseMessage? apiResponse;
    private string? textToOutput;
    private HttpClient? httpClient;

    protected override void OnInitialized()
    {
        httpClient = new HttpClient();
    }

    private string prompt = "";
    private void OnInputEvent(ChangeEventArgs changeEvent)
    {

        prompt = (string)changeEvent.Value;

    }



    /// <summary>
    /// Makes request to generate the Research Front.
    /// </summary>
    /// <returns></returns>
    private async Task OutputText()

    {
        try
        {
            Console.WriteLine("OutputText method called");

            var response = await httpClient.PostAsJsonAsync("http://localhost:5000/research-front/generate", new
            {
                systemMessage = "string",
                userMessage = $"{prompt} "
                @* userMessage = $"Use svenska, 25 token to generate research front of the following articals abstracts{prompt} " *@
            });

            if (response.IsSuccessStatusCode)
            {
                textToOutput = await response.Content.ReadAsStringAsync();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error content: {errorContent}");
                textToOutput = "Error: " + response.ReasonPhrase + " - " + errorContent;
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            textToOutput = "Request failed: " + ex.Message;
        }
    }
}
