@using Frontend.Shared
@using Microsoft.AspNetCore.Components.Forms
@using Frontend.Models
@using Frontend.Services
@inject IConfiguration config
@inject ExcelService ExcelService
@inject UploadFileService UploadFileService

<PageTitle>UploadFile</PageTitle>
<div class="index-container">
    <h1>Upload an excel file here</h1>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <h3>Error</h3>
        <p class="text-danger">@errorMessage</p>
    }
    <InputFile OnChange="@LoadFiles" multiple accept=".docx" />
    @if (uploadedFiles.Count > 0)
    {
        <div class="uploaded-files-section">
            <h2>Uploaded Files</h2>
            <ul class="uploaded-files-list">
                @foreach (var fileName in uploadedFiles)
                {
                    <li class="uploaded-file-item">@fileName</li>
                }
            </ul>
        </div>
        <button @onclick="SendFileToApi">Find Research Front</button>
    }
</div>
@code {
    private string? errorMessage; // Variable to hold the latest error message
    private List<IBrowserFile> filesToUpload = new(); // To hold files in memory
    private List<string> uploadedFiles = new(); // To store uploaded file names
    private int maxAllowedFiles = 1;
    [Parameter]
    public EventCallback OnFileUploaded { get; set; }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        uploadedFiles.Clear(); // Clear previously uploaded files list
        filesToUpload.Clear(); // Clear previously selected files
        errorMessage = string.Empty; // Reset the error message
        var selectedFiles = e.GetMultipleFiles(maxAllowedFiles);
        @* foreach (var file in selectedFiles)
        {
            var models = await UploadFileService.ProcessExcelFile(file);
            if (models.Any())
            {
                filesToUpload.Add(file);
                uploadedFiles.Add(file.Name);
            }
            else
            {
                errorMessage = $"{file.Name} could not be parsed. Please ensure it is a valid Excel file.";
                return; // Exit early since we only show one error at a time
            }
        } *@
        filesToUpload.Add(selectedFiles[0]);
                uploadedFiles.Add(selectedFiles[0].Name);
    }

    private async Task SendFileToApi()
    {
        var apiBaseUrl = config["APIBaseUrl"];
        if (string.IsNullOrEmpty(apiBaseUrl))
        {
            errorMessage = "API base URL is not configured properly.";
            return;
        }

        var (isSuccess, latestErrorMessage) = await UploadFileService.SendFileToApi(filesToUpload, apiBaseUrl);
        if (isSuccess)
        {
            uploadedFiles.Clear();
            await OnFileUploaded.InvokeAsync();
        }
        else
        {
            errorMessage = latestErrorMessage;
        }
    }
}
