@using Frontend.Shared
@using Microsoft.AspNetCore.Components.Forms
@using Frontend.Models
@using Frontend.Services
@inject IConfiguration config
@inject UploadFileService UploadFileService

<div class="index-container">
    <h1>Create Assistant and Upload File</h1>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <h3>Error</h3>
        <p class="text-danger">@errorMessage</p>
    }

    <EditForm Model="@research" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>
            <label for="researchArea">
                Enter your research area:
                <InputText id="researchArea" @bind-Value="research.ResearchArea"/>
            </label>
        </p>
        <p>
            Upload file (.docx):
            <InputFile OnChange="LoadFiles" accept=".docx"/>
        </p>
        
        <button type="submit">Create Assistant</button>
    </EditForm>

    @if (uploadedFiles.Count > 0)
    {
        <div class="uploaded-files-section">
            <h2>Uploaded Files</h2>
            <ul class="uploaded-files-list">
                @foreach (var fileName in uploadedFiles)
                {
                    <li>@fileName</li>
                }
            </ul>
        </div>
    }
</div>

@code {
    private UserResearch research = new UserResearch();
    private string formResults = "";

    private int maxAllowedFiles = 1;
    private long maxFileSize = 1024 * 1024 * 512; // 512 MB
    private string? errorMessage;
    private List<string> uploadedFiles = new(); // To store uploaded file names for display

    private async Task HandleValidSubmit()
{
    if (filesToUpload.Any())
    {
        var apiBaseUrl = config["APIBaseUrl"];
        // Explicitly declare the tuple types instead of using var
        (bool isSuccess, string latestErrorMessage) = await UploadFileService.SendFileToApi(filesToUpload, apiBaseUrl, research.ResearchArea);

        if (isSuccess)
        {
            formResults = $"{research.ResearchArea} research was just created with the uploaded file.";
            uploadedFiles.Clear();
            // Trigger any success actions like navigating to another page or showing a success message
        }
        else
        {
            errorMessage = latestErrorMessage;
        }
    }
    else
    {
        errorMessage = "Please upload a file.";
    }

    // Reset research model for new input
    research = new UserResearch();
}


    private List<IBrowserFile> filesToUpload = new(); // To hold the file in memory before upload

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        errorMessage = string.Empty; // Reset the error message
        uploadedFiles.Clear(); // Clear previously uploaded files list for display
        filesToUpload.Clear(); // Clear previously selected files

        if (e.FileCount > maxAllowedFiles)
        {
            errorMessage = $"Error: Attempting to upload {e.FileCount} files, but only {maxAllowedFiles} is allowed.";
            return;
        }

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (file.Size > maxFileSize)
            {
                errorMessage = $"File size exceeds the maximum limit of {maxFileSize / (1024 * 1024)} MB.";
                return;
            }

            filesToUpload.Add(file);
            uploadedFiles.Add(file.Name);
        }
    }
}
