@page "/uploadfile"
@inject IConfiguration config
@using Frontend.Data

<PageTitle>UploadFile</PageTitle>

<div class="index-container" > 

  <EditForm Model="newAbstract"> 
        <div>
            <label for="articleId" >Article Id:</label>
            <InputText id="articleId" class="form-control"  @bind-Value="newAbstract.ArticleId" />
        </div>
        
        <div>
            <label for="author" >Author: </label>
            <InputText id="author" class="form-control" />
        </div>
        <div>
            <label for="title" >Title:</label>
            <InputText id="title" class="form-control" />
        </div>

        <div>
            <label for="year" >Year: </label>
            <InputText id="year" class="form-control" />
        </div>
        <div>
            <label for="abstract" >Abstract: </label>
            <InputText id="abstract" class="form-control" />
        </div>
        <div>
            <label for="fullReference" >Full Reference: </label>
            <InputText id="fullReference" class="form-control" />
        </div>
        <div>
            <label for="notes" >Notes: </label>
            <InputText id="notes" class="form-control" />

            <button class="" type="submit" > Add a new abstract</button>
        </div>

    </EditForm>

<h1>Upload an excel file</h1>

<InputFile OnChange="@LoadFiles" multiple accept=".xlsx" />
</div>

@if (errors.Count > 0)
{
  <h2>Errors</h2>
  <ul class="text-danger">
    @foreach (var error in errors)
    {
      <li>@error</li>
    }
  </ul>
}


@code {

  private long maxFileSize = 1024 * 1024 * 3; // 3MB
  private int maxAllowedFiles = 3; // 3MB
  private List<string> errors = new();
      private AbstractModel newAbstract = new();
    private IBrowserFile? file;
  
  @* private async Task LoadFiles(InputFileChangeEventArgs e) *@
  private void LoadFiles(InputFileChangeEventArgs e)
  {

    file = e.File;
    @* errors.Clear();

    if (e.FileCount > maxAllowedFiles)
    {
      errors.Add($"Error: Attempting to upload {e.FileCount} files but only {maxAllowedFiles} are allowed");
      return;
    }

    foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
    {
      try
      {
        string newFileName = Path.ChangeExtension(

        Path.GetRandomFileName(),
        Path.GetExtension(file.Name));

        string path = Path.Combine(
        config.GetValue<string>("FileStorage")!,
        "researchfile",
        newFileName);

        Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, "researchfile"));

        await using FileStream fs = new(path, FileMode.Create);
        await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

      }
      catch (Exception ex)
      {
        errors.Add($"File: {file.Name} Error: {ex.Message}");
      }



    }



  } *@

}
