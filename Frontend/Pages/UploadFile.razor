@page "/uploadfile"
@inject IConfiguration config
@using Frontend.Data

<PageTitle>UploadFile</PageTitle>

<div class="index-container" > 
<div>
<h1>Upload an excel file</h1>
</div>
  <EditForm Model="newResearch" OnValidSubmit="SubmitForm"> 
        <div>
            <label for="title" >Research Title:</label>
            <InputText id="title" class="form-control"  @bind-Value="newResearch.Title" />
        </div>

        <div>
            <label for="researcherFullName" >Researcher FullName: </label>
           <InputText id="researcherFullName" class="form-control" @bind-Value="newResearch.ResearcherFullName" />
        </div>
        <div>
           <label for="researchFile" >Researcher file: </label>
            <InputFile OnChange="@LoadFiles" multiple accept=".xlsx" />
        </div>

        <button type="submit" > Add a new Research file</button>
  </EditForm>
</div>

@if (errors.Count > 0)
{
  <h2>Errors</h2>
  <ul class="text-danger">
    @foreach (var error in errors)
    {
      <li>@error</li>
    }
  </ul>
}


@code {

  private long maxFileSize = 1024 * 1024 * 3; // 3MB
  private int maxAllowedFiles = 3; // 3MB
  private List<string> errors = new();
  private ResearchModel newResearch = new();
  private IBrowserFile? file;
  
  private async Task SubmitForm()
  {
    try
    {
      Console.WriteLine("submit");

      string relativePath = await CaptureFile();
      newResearch.FileName = relativePath;

        newResearch = new ResearchModel();
        file = null;
        StateHasChanged();
    }
    catch(Exception ex)
    {
      errors.Add($"Error: {ex.Message}");
    }
  }

  private void LoadFiles(InputFileChangeEventArgs e)
  {

    file = e.File;
  }

  private async Task<string> CaptureFile()
  {
    if (file is null) {
      return "";
    }

    try
    {
        string newFileName = Path.ChangeExtension(
        Path.GetRandomFileName(),
        Path.GetExtension(file.Name));

        string path = Path.Combine(
          config.GetValue<string>("FileStorage")!,
          "researchfile",
          newFileName);

        string relativePath = Path.Combine("researchfile", newFileName);

        Directory.CreateDirectory(Path.Combine(
          config.GetValue<string>("FileStorage")!,
             "researchfile"));

        await using FileStream fs = new(path, FileMode.Create);
        await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
        return relativePath;
      }
      catch (Exception ex)
      {
        errors.Add($"File: {file.Name} Error: {ex.Message}");
        throw;
      }
}
}
