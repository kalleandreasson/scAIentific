@page "/register"
@using Frontend.Models
@using Frontend.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

<PageTitle>Register</PageTitle>

<EditForm Model="newUser" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Username:</label>
        <InputText @bind-Value="newUser.Username" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="newUser.Password" type="password" />
    </div>
    <div>
        <label>Email:</label>
        <InputText @bind-Value="newUser.Email" type="email" />
    </div>
    <button type="submit">Register</button>
</EditForm>

@code {

    private UserRegistrationModel newUser = new UserRegistrationModel();

    private class UserResponse
    {
        public string Id { get; set; }
    }

     private async Task HandleRegister()
    {
         string apiBaseUrl = Configuration["APIBaseUrl"];
         string registerEndpoint = $"{apiBaseUrl}auth/register";

        var response = await Http.PostAsJsonAsync(registerEndpoint, newUser);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Console.WriteLine("Registration failed");
            Console.WriteLine($"status code = {response.StatusCode}");
            Console.WriteLine($"response.Content = {response.Content}");
            Console.WriteLine($"response.ReasonPhrase = {response.ReasonPhrase}");
            Console.WriteLine($"response.ReasonPhrase = {response.Headers}");
        }
    } 
}
