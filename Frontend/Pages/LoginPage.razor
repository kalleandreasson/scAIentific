@page "/login"
@using Frontend.Models
@using Frontend.Services
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject SessionService SessionService
@inject IConfiguration Configuration


<PageTitle>Login</PageTitle>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Username:</label>
        <InputText @bind-Value="loginModel.Username" />
    </div>
    <div>
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" />
    </div>
    <button type="submit">Login</button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();

    private async Task HandleLogin()
    {
        try
        {
            string apiBaseUrl = Configuration["APIBaseUrl"] ?? throw new InvalidOperationException("API base URL not configured.");
            string registerEndpoint = $"{apiBaseUrl}auth/login";

            Console.WriteLine($"Calling API at: {registerEndpoint}");

            var response = await Http.PostAsJsonAsync(registerEndpoint, loginModel);
            if (response.IsSuccessStatusCode)
            {
                var jwt = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"JWT received: {jwt}");
                SessionService.SetToken(jwt); // Save JWT for session management
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Login failed. Status code: " + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            throw; // Consider handling the exception more gracefully
        }
    }
}

