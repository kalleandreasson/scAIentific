@page "/assistant"
@using Frontend.Shared
@using Frontend.Models
@using Frontend.Services
@inject ChatService ChatService
@using System.Globalization

<PageTitle>Assistant</PageTitle>

@if (!isChatHistoryLoaded)
{
    <div><h1>Loading...</h1></div>
}
else
{
    <div class="index-container">
        <h1>Research Assistant</h1>
        <div class="chat-history">
            @foreach (var message in chatHistory)
            {
                var messageTime = DateTimeOffset.FromUnixTimeSeconds(message.CreatedAt).ToLocalTime().ToString("g", CultureInfo.CurrentCulture);
                var messageType = message.Role == 3 ? "User" : "Assistant";
                if (message.Content != null && message.Content.Any())
                {
                    var firstContent = message.Content.First();
                    if (firstContent.Text != null)
                    {
                        <div class="@($"message {messageType.ToLower()}")">
                            <div class="message-info">
                                <span class="message-type">@messageType</span>
                                <span class="message-time">@messageTime</span>
                            </div>
                            <p>@firstContent.Text.Value</p>
                        </div>
                    }
                }
            }
        </div>
        <EditForm Model="@chat" OnValidSubmit="HandleSubmitAsync">
            <InputText @bind-Value="@userQuery" />
            <button type="submit">Send</button>
        </EditForm>
    </div>
}

@code {
    private string userQuery = "";
    private List<ChatMessage> chatHistory = new List<ChatMessage>();
    private bool isChatHistoryLoaded = false;
    private object chat = new { };

    protected override async Task OnInitializedAsync()
    {
        var chatResponse = await ChatService.GetChatHistoryAsync();
        if (chatResponse?.Messages != null)
        {
            chatHistory = chatResponse.Messages.OrderBy(m => m.CreatedAt).ToList();
        }
        isChatHistoryLoaded = true; // Indicate that the chat history has been loaded
    }

    private async Task HandleSubmitAsync()
    {
        var chatRequest = new ChatRequest { UserMessage = userQuery };
        var chatResponse = await ChatService.PostUserQueryAsync(chatRequest);

        if (chatResponse?.Messages != null)
        {
            chatHistory.AddRange(chatResponse.Messages);
            chatHistory = chatHistory.OrderBy(m => m.CreatedAt).ToList();
        }
        userQuery = "";
    }
}
